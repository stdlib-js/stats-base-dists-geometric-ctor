{
  "version": 3,
  "sources": ["../lib/main.js", "../lib/index.js"],
  "sourcesContent": ["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable no-restricted-syntax, no-invalid-this */\n\n'use strict';\n\n// MODULES //\n\nvar defineProperty = require( '@stdlib/utils-define-property' );\nvar setReadOnly = require( '@stdlib/utils-define-nonenumerable-read-only-property' );\nvar setReadOnlyAccessor = require( '@stdlib/utils-define-nonenumerable-read-only-accessor' );\nvar isProbability = require( '@stdlib/assert-is-probability' ).isPrimitive;\nvar entropy = require( '@stdlib/stats-base-dists-geometric-entropy' );\nvar kurtosis = require( '@stdlib/stats-base-dists-geometric-kurtosis' );\nvar mean = require( '@stdlib/stats-base-dists-geometric-mean' );\nvar median = require( '@stdlib/stats-base-dists-geometric-median' );\nvar mode = require( '@stdlib/stats-base-dists-geometric-mode' );\nvar skewness = require( '@stdlib/stats-base-dists-geometric-skewness' );\nvar stdev = require( '@stdlib/stats-base-dists-geometric-stdev' );\nvar variance = require( '@stdlib/stats-base-dists-geometric-variance' );\nvar cdf = require( '@stdlib/stats-base-dists-geometric-cdf' );\nvar logcdf = require( '@stdlib/stats-base-dists-geometric-logcdf' );\nvar logpmf = require( '@stdlib/stats-base-dists-geometric-logpmf' );\nvar mgf = require( '@stdlib/stats-base-dists-geometric-mgf' );\nvar pmf = require( '@stdlib/stats-base-dists-geometric-pmf' );\nvar quantile = require( '@stdlib/stats-base-dists-geometric-quantile' );\nvar format = require( '@stdlib/string-format' );\n\n\n// FUNCTIONS //\n\n/**\n* Evaluates the cumulative distribution function (CDF).\n*\n* @private\n* @param {number} x - input value\n* @returns {number} evaluated CDF\n*/\nfunction geometricCDF( x ) {\n\treturn cdf( x, this.p );\n}\n\n/**\n* Evaluates the natural logarithm of the cumulative distribution function (CDF).\n*\n* @private\n* @param {number} x - input value\n* @returns {number} evaluated logCDF\n*/\nfunction geometricLogCDF( x ) {\n\treturn logcdf( x, this.p );\n}\n\n/**\n* Evaluates the natural logarithm of the probability mass function (PMF).\n*\n* @private\n* @param {number} x - input value\n* @returns {number} evaluated logPMF\n*/\nfunction geometricLogPMF( x ) {\n\treturn logpmf( x, this.p );\n}\n\n/**\n* Evaluates the moment-generating function (MGF).\n*\n* @private\n* @param {number} t - input value\n* @returns {number} evaluated MGF\n*/\nfunction geometricMGF( t ) {\n\treturn mgf( t, this.p );\n}\n\n/**\n* Evaluates the probability mass function (PMF).\n*\n* @private\n* @param {number} x - input value\n* @returns {number} evaluated PMF\n*/\nfunction geometricPMF( x ) {\n\treturn pmf( x, this.p );\n}\n\n/**\n* Evaluates the quantile function.\n*\n* @private\n* @param {Probability} p - input probability\n* @returns {number} evaluated quantile function\n*/\nfunction geometricQuantile( p ) {\n\treturn quantile( p, this.p );\n}\n\n\n// MAIN //\n\n/**\n* Geometric distribution constructor.\n*\n* @constructor\n* @param {Probability} [p=0.5] - success probability\n* @throws {TypeError} `p` must be a probability\n* @returns {Geometric} distribution instance\n*\n* @example\n* var geometric = new Geometric();\n*\n* var y = geometric.cdf( 1.8 );\n* // returns 0.75\n*\n* var v = geometric.mode;\n* // returns 0.0\n*/\nfunction Geometric() {\n\tvar p;\n\tif ( !(this instanceof Geometric) ) {\n\t\tif ( arguments.length === 0 ) {\n\t\t\treturn new Geometric();\n\t\t}\n\t\treturn new Geometric( arguments[ 0 ] );\n\t}\n\tif ( arguments.length ) {\n\t\tp = arguments[ 0 ];\n\t\tif ( !isProbability( p ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Mean parameter `%s` must be a probability. Value: `%s`.', 'p', p ) );\n\t\t}\n\t} else {\n\t\tp = 0.5;\n\t}\n\tdefineProperty( this, 'p', {\n\t\t'configurable': false,\n\t\t'enumerable': true,\n\t\t'get': function get() {\n\t\t\treturn p;\n\t\t},\n\t\t'set': function set( value ) {\n\t\t\tif ( !isProbability( value ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid assignment. Must be a probability. Value: `%s`.', value ) );\n\t\t\t}\n\t\t\tp = value;\n\t\t}\n\t});\n\treturn this;\n}\n\n/**\n* Geometric distribution differential entropy.\n*\n* @name entropy\n* @memberof Geometric.prototype\n* @type {number}\n* @see [differential entropy]{@link https://en.wikipedia.org/wiki/Entropy_%28information_theory%29}\n*\n* @example\n* var geometric = new Geometric( 0.4 );\n*\n* var v = geometric.entropy;\n* // returns ~1.683\n*/\nsetReadOnlyAccessor( Geometric.prototype, 'entropy', function get() {\n\treturn entropy( this.p );\n});\n\n/**\n* Geometric distribution excess kurtosis.\n*\n* @name kurtosis\n* @memberof Geometric.prototype\n* @type {number}\n* @see [kurtosis]{@link https://en.wikipedia.org/wiki/Kurtosis}\n*\n* @example\n* var geometric = new Geometric( 0.4 );\n*\n* var v = geometric.kurtosis;\n* // returns ~6.267\n*/\nsetReadOnlyAccessor( Geometric.prototype, 'kurtosis', function get() {\n\treturn kurtosis( this.p );\n});\n\n/**\n* Geometric distribution expected value.\n*\n* @name mean\n* @memberof Geometric.prototype\n* @type {number}\n* @see [expected value]{@link https://en.wikipedia.org/wiki/Expected_value}\n*\n* @example\n* var geometric = new Geometric( 0.4 );\n*\n* var v = geometric.mean;\n* // returns ~1.5\n*/\nsetReadOnlyAccessor( Geometric.prototype, 'mean', function get() {\n\treturn mean( this.p );\n});\n\n/**\n* Geometric distribution median.\n*\n* @name median\n* @memberof Geometric.prototype\n* @type {number}\n* @see [median]{@link https://en.wikipedia.org/wiki/Median}\n*\n* @example\n* var geometric = new Geometric( 0.4 );\n*\n* var v = geometric.median;\n* // returns 1.0\n*/\nsetReadOnlyAccessor( Geometric.prototype, 'median', function get() {\n\treturn median( this.p );\n});\n\n/**\n* Geometric distribution mode.\n*\n* @name mode\n* @memberof Geometric.prototype\n* @type {number}\n* @see [mode]{@link https://en.wikipedia.org/wiki/Mode_%28statistics%29}\n*\n* @example\n* var geometric = new Geometric( 0.4 );\n*\n* var v = geometric.mode;\n* // returns 0.0\n*/\nsetReadOnlyAccessor( Geometric.prototype, 'mode', function get() {\n\treturn mode( this.p );\n});\n\n/**\n* Geometric distribution skewness.\n*\n* @name skewness\n* @memberof Geometric.prototype\n* @type {number}\n* @see [skewness]{@link https://en.wikipedia.org/wiki/Skewness}\n*\n* @example\n* var geometric = new Geometric( 0.4 );\n*\n* var v = geometric.skewness;\n* // returns ~2.066\n*/\nsetReadOnlyAccessor( Geometric.prototype, 'skewness', function get() {\n\treturn skewness( this.p );\n});\n\n/**\n* Geometric distribution standard deviation.\n*\n* @name stdev\n* @memberof Geometric.prototype\n* @type {PositiveNumber}\n* @see [standard deviation]{@link https://en.wikipedia.org/wiki/Standard_deviation}\n*\n* @example\n* var geometric = new Geometric( 0.4 );\n*\n* var v = geometric.stdev;\n* // returns ~1.936\n*/\nsetReadOnlyAccessor( Geometric.prototype, 'stdev', function get() {\n\treturn stdev( this.p );\n});\n\n/**\n* Geometric distribution variance.\n*\n* @name variance\n* @memberof Geometric.prototype\n* @type {PositiveNumber}\n* @see [variance]{@link https://en.wikipedia.org/wiki/Variance}\n*\n* @example\n* var geometric = new Geometric( 0.4 );\n*\n* var v = geometric.variance;\n* // returns ~3.75\n*/\nsetReadOnlyAccessor( Geometric.prototype, 'variance', function get() {\n\treturn variance( this.p );\n});\n\n/**\n* Evaluates the cumulative distribution function (CDF).\n*\n* @name cdf\n* @memberof Geometric.prototype\n* @type {Function}\n* @param {number} x - input value\n* @returns {number} evaluated CDF\n* @see [cdf]{@link https://en.wikipedia.org/wiki/Cumulative_distribution_function}\n*\n* @example\n* var geometric = new Geometric( 0.2 );\n*\n* var v = geometric.cdf( 1.5 );\n* // returns ~0.36\n*/\nsetReadOnly( Geometric.prototype, 'cdf', geometricCDF );\n\n/**\n* Evaluates the natural logarithm of the cumulative distribution function (logCDF).\n*\n* @name logcdf\n* @memberof Geometric.prototype\n* @type {Function}\n* @param {number} x - input value\n* @returns {number} evaluated logCDF\n* @see [cdf]{@link https://en.wikipedia.org/wiki/Cumulative_distribution_function}\n*\n* @example\n* var geometric = new Geometric( 0.2 );\n*\n* var v = geometric.logcdf( 1.5 );\n* // returns ~-1.022\n*/\nsetReadOnly( Geometric.prototype, 'logcdf', geometricLogCDF );\n\n/**\n* Evaluates the natural logarithm of the probability mass function (logPMF).\n*\n* @name logpdf\n* @memberof Geometric.prototype\n* @type {Function}\n* @param {number} x - input value\n* @returns {number} evaluated logPMF\n* @see [pmf]{@link https://en.wikipedia.org/wiki/Probability_mass_function}\n*\n* @example\n* var geometric = new Geometric( 0.2 );\n*\n* var v = geometric.logpmf( 2.0 );\n* // returns ~-2.056\n*/\nsetReadOnly( Geometric.prototype, 'logpmf', geometricLogPMF );\n\n/**\n* Evaluates the moment-generating function (MGF).\n*\n* @name mgf\n* @memberof Geometric.prototype\n* @type {Function}\n* @param {number} t - input value\n* @returns {number} evaluated MGF\n* @see [mgf]{@link https://en.wikipedia.org/wiki/Moment-generating_function}\n*\n* @example\n* var geometric = new Geometric( 0.2 );\n*\n* var v = geometric.mgf( 0.1 );\n* // returns ~1.908\n*/\nsetReadOnly( Geometric.prototype, 'mgf', geometricMGF );\n\n/**\n* Evaluates the probability mass function (PMF).\n*\n* @name pmf\n* @memberof Geometric.prototype\n* @type {Function}\n* @param {number} x - input value\n* @returns {number} evaluated PMF\n* @see [pmf]{@link https://en.wikipedia.org/wiki/Probability_mass_function}\n*\n* @example\n* var geometric = new Geometric( 0.2 );\n*\n* var v = geometric.pmf( 2.0 );\n* // returns ~0.128\n*\n* v = geometric.pmf( 0.8 );\n* // returns 0.0\n*/\nsetReadOnly( Geometric.prototype, 'pmf', geometricPMF );\n\n/**\n* Evaluates the quantile function.\n*\n* @name quantile\n* @memberof Geometric.prototype\n* @type {Function}\n* @param {Probability} p - input probability\n* @returns {number} evaluated quantile function\n* @see [quantile function]{@link https://en.wikipedia.org/wiki/Quantile_function}\n*\n* @example\n* var geometric = new Geometric( 0.2 );\n*\n* var v = geometric.quantile( 0.5 );\n* // returns 3.0\n*/\nsetReadOnly( Geometric.prototype, 'quantile', geometricQuantile );\n\n\n// EXPORTS //\n\nmodule.exports = Geometric;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Geometric distribution constructor.\n*\n* @module @stdlib/stats-base-dists-geometric-ctor\n*\n* @example\n* var Geometric = require( '@stdlib/stats-base-dists-geometric-ctor' );\n*\n* var geometric = new Geometric( 0.3 );\n*\n* var y = geometric.cdf( 3.0 );\n* // returns ~0.76\n*\n* var mode = geometric.mode;\n* // returns 0.0\n*/\n\n// MODULES //\n\nvar main = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n"],
  "mappings": "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",
  "names": ["require_main", "__commonJSMin", "exports", "module", "defineProperty", "setReadOnly", "setReadOnlyAccessor", "isProbability", "entropy", "kurtosis", "mean", "median", "mode", "skewness", "stdev", "variance", "cdf", "logcdf", "logpmf", "mgf", "pmf", "quantile", "format", "geometricCDF", "x", "geometricLogCDF", "geometricLogPMF", "geometricMGF", "t", "geometricPMF", "geometricQuantile", "p", "Geometric", "value", "main"]
}
